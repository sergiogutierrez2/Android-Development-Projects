Photonotes homework
-----------------------------
AddPhotoActivity.java
-----------------------------
  
package com.example.i851409.photonotes;

import android.content.ContentValues;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Bitmap;

import java.io.IOException;
import java.lang.*;

import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;

public class AddPhotoActivity extends AppCompatActivity {
    EditText ed;
    Button btn1;
    Button btn2;
    boolean flag_capture_button = false;
    File image_file;
    static String image_path;
    String image_name;
    public static final int IMAGE_CAPTURE_IDENTIFIER = 21;
    Bitmap current_image;
    ImageView imgView;
    Intent current_photo_intent;
    File external_picture_directory;
    Uri image_uri;
    String image_caption;
    ContentValues cv;



    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_photo);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        //Instantiating the EditText object
        ed = (EditText) findViewById(R.id.editText);

        //Setting an onClick() listener to the CAPTURE image button
        btn1 = (Button) findViewById(R.id.button);
        btn1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //Set the flag variable to true
                flag_capture_button = true;
                //This should now open the Camera of the Device
                //Capture the Image
                Intent image_capture_intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);

                //Check if there is a suitable component to handle the CaptureImage component
                //If a suitable component is found then start the activity to Capture the Image
                if(image_capture_intent.resolveActivity(getPackageManager()) != null){

                    //Get the reference to the External Storage
                    external_picture_directory = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);

                    //Generating random numbers between 1 and 10000 to have a collision-free file name
                    Random random_generator = new Random();
                    int random_number = random_generator.nextInt(10000);

                    //Generating the current timestamp to be added to the generated file
                    String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());

                    //Getting the name of the image file
                    image_name = ed.getText().toString() + random_number + timeStamp;

                    //Creating a new file for the captured image
                    File image_file = new File(external_picture_directory, image_name + ".jpg");

                    //Set up the image URI
                    image_uri = Uri.fromFile(image_file);

                    //Storing the image path in a class variable
                    image_path = image_file.getAbsolutePath();

                    //SAVE the Captured Image
                    image_capture_intent.putExtra(MediaStore.EXTRA_OUTPUT, image_uri);

                    //Start the Camera Activity
                    startActivityForResult(image_capture_intent, IMAGE_CAPTURE_IDENTIFIER);

                }

            }
        });


        //Setting an onClick() listener to the SAVE image button
        btn2 = (Button) findViewById(R.id.button2);
        btn2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //This should now save the image inside the database
                //First check if the caption field is not null
                if(ed.getText().toString().equals("")){
                    Toast.makeText(getApplicationContext(), "CAPTION cannot be empty", Toast.LENGTH_SHORT).show();
                }

                //Secondly check if the image has been captured or not
                else if(flag_capture_button == false){
                    Toast.makeText(getApplicationContext(), "IMAGE has to be CAPTURED", Toast.LENGTH_SHORT).show();
                }
                else{
                    //Now you can proceed with saving the Image Caption and the Image Path inside the database
                    //At the end you need to navigate back to the Main Activity with the newly added row in ListView

                    //First, you need to have the image caption and the image file path in two strings
                    image_caption = ed.getText().toString();

                    //Now you have to insert the two strings into the table
                    cv = new ContentValues();
                    cv.put(PhotoDatabase.CAPTION, image_caption);
                    cv.put(PhotoDatabase.FILE_PATH, image_path);
                    long res = MainActivity.sqdb.insert(PhotoDatabase.TABLE_NAME, null, cv);

                    //After insertion has been done successfully, return back to the original activity displaying the listView

                    //Starting the MainActivity
                    Intent it = new Intent(AddPhotoActivity.this, MainActivity.class);

                    //The finish() will destroy the current activity and the previous activity from the Activity Stack will be started
                    finish();

                    startActivity(it);
                }
            }
        });


    }


    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_uninstall, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        //If the Uninstall button is pressed then the Application should be uninstalled
        if(id == R.id.item1){
            Intent intent = new Intent(Intent.ACTION_DELETE);
            intent.setData(Uri.parse("package:com.example.i851409.photonotes"));
            startActivity(intent);
        }

        return super.onOptionsItemSelected(item);
    }


    @Override
    //This method will be invoked when the Camera Application is closed
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        //Check whether the Camera Activity handles the correct activity
        if(requestCode == IMAGE_CAPTURE_IDENTIFIER){
            //Now you can do whatever you want to depending upon whether the user ticks right or wrong option

            //Do something if the user hits the OK button
            if(resultCode == RESULT_OK){
                //Do something if you want to do with the achieved result
                //Fetch the image from the External Storage
                BitmapFactory.Options options = new BitmapFactory.Options();
                options.inSampleSize = 4;
                Bitmap b = BitmapFactory.decodeFile(image_path, options);

                //Display the captured image inside the ImageView
                imgView = (ImageView) findViewById(R.id.imageView);
                imgView.setImageBitmap(b);
            }

            //Do nothing if the user hits the cancel button
            if(resultCode == RESULT_CANCELED){
                //This will not allow the user to save the image after selecting to not capture the image
                flag_capture_button = false;
            }
        }
    }
}
-----------------------------
MainActivity.java
-----------------------------
package com.example.i851409.photonotes;

import android.content.ContentValues;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.View;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;

public class MainActivity extends AppCompatActivity {

    //String photo_captions[] = {"Harsh Pandya","Pratham Vasa","Adit Vira","Rohit Makhija","Jay Shah"};
    static PhotoDatabase pdb;
    ContentValues cv;
    static SQLiteDatabase sqdb;
    public static final String key1 = "com.example.i851409.photonotes.caption111";
    public static final String key2 = "com.example.i851409.photonotes.filepath111";
    //public static final String key3 = "com.example.i851409.photonotes.position";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
                        .setAction("Action", null).show();
            }
        });

        //We now have to first fetch the captions and the file paths from the database table and feed it to the ArrayAdapter
        //Connecting to the database to create the table
        pdb = new PhotoDatabase(this);
        sqdb = pdb.getWritableDatabase();

        //Now run the SELECT query to fetch all the records from the database table
        Cursor csr = sqdb.query(PhotoDatabase.TABLE_NAME, null, null, null, null, null, null);

        //Make two string arrays and 1 int array whose size wil depend upon the number of rows returned to store the table data
        int total_count = csr.getCount();
        int array_ids[] = new int[total_count];
        final String array_captions[] = new String[total_count];
        final String array_filepaths[] = new String[total_count];

        //Variable to keep the counter for each row fetched from the database table
        int i = 0;

        while(csr.moveToNext()){
            array_ids[i] = csr.getInt(0);
            array_captions[i] = csr.getString(1);
            array_filepaths[i] = csr.getString(2);
            i = i + 1;
        }

        //A simple ArrayAdapter to store the names of the Captions of the images
        //The ArrayAdapter will fetch the data from the database
        ArrayAdapter adapter = new ArrayAdapter<String>(MainActivity.this, R.layout.simple_list_view, R.id.textView, array_captions);

        //Instantiating the ListView object
        ListView lv = (ListView) findViewById(R.id.listView);

        //Setting the ArrayAdapter for the ListView to display the contents in the ListView fetched from the sqlite database
        lv.setAdapter(adapter);

        //Setting up a listener for each item inside the ListView
        lv.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                //Whenever a particular item is clicked a new activity will be invoked
                Intent intent2 = new Intent(MainActivity.this, PhotoDescriptionActivity.class);

                //Depending upon the position clicked by the user to PhotoDescriptionActivity
                //Sending the Caption selected by the user to PhotoDescriptionActivity
                intent2.putExtra(key1, array_captions[position]);

                //Sending the Filepath associated to PhotoDescriptionActivity
                intent2.putExtra(key2, array_filepaths[position]);

                //Launching the activity PhotoDescriptionActivity
                startActivity(intent2);
            }
        });

        //Setting an onClick() event listener to the Floating Action Button
        FloatingActionButton myFab = (FloatingActionButton) findViewById(R.id.fab);
        myFab.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                //This will invoke the new activity called AddPhotoActivity
                Intent intent1 = new Intent(MainActivity.this, AddPhotoActivity.class);
                startActivity(intent1);
            }
        });
    }//end of onCreate()

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_uninstall, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        //If the Uninstall button is pressed then the Application should be uninstalled
        if(id == R.id.item1){
            Intent intent = new Intent(Intent.ACTION_DELETE);
            intent.setData(Uri.parse("package:com.example.i851409.photonotes"));
            startActivity(intent);
        }

        return super.onOptionsItemSelected(item);
    }
}
--------------------------
PhotoDatabase.java
--------------------------
package com.example.i851409.photonotes;

/**
 * Created by I851409 on 2/13/2016.
 */

import android.content.Context;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.widget.Toast;

//This Class basically creates the database, design of the database schema, creates a table and updates the database
public class PhotoDatabase extends SQLiteOpenHelper{
    static final String DATABASE_NAME = "PhotoDatabase.db";
    static final int DATABASE_VERSION = 1;
    static final String TABLE_NAME = "PhotoTable";
    static final String ID ="_id";
    static final String CAPTION = "caption";
    static final String FILE_PATH = "path";
    static final String TABLE_CREATE = "CREATE TABLE "+TABLE_NAME+" ("+ID+" INTEGER PRIMARY KEY AUTOINCREMENT, "+CAPTION+" VARCHAR(255), "+FILE_PATH+" VARCHAR(255));";
    static final String TABLE_QUERY = "SELECT * FROM "+TABLE_NAME;
    Context context;

    //Must implement this constructor
    public PhotoDatabase(Context context){
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
        this.context = context;
    }

    //Must implement the onCreate() method
    //onCreate() method creates the database schema by creating a table with the specified columns
    public void onCreate(SQLiteDatabase db){
        //Creating the Table Definition
        try {
            db.execSQL(TABLE_CREATE);

        }
        catch(SQLException e){
            e.printStackTrace();
        }
    }

    //Must also implement onUpgrade() which is invoked when there is any change in the database schema
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion){

    }

}
-----------------------------
PhotoDescriptionActivity.java
----------------------------
package com.example.i851409.photonotes;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.content.Intent;
import android.widget.ImageView;
import android.widget.TextView;

public class PhotoDescriptionActivity extends AppCompatActivity {

    TextView tvr;
    ImageView ivr;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_photo_description);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        //Receiving the intent from the activity MainActivity
        Intent intent3 = getIntent();

        //Preparing the variables to store the received Caption and Filepath
        String caption_received = intent3.getStringExtra(MainActivity.key1);
        String filepath_received = intent3.getStringExtra(MainActivity.key2);

        //Now fetch the TextView and the ImageView objects
        tvr = (TextView) findViewById(R.id.textView4);
        ivr = (ImageView) findViewById(R.id.imageView2);

        //Set the appropriate received Caption in the TextView
        tvr.setText(caption_received);

        //Set the appropriate received Image from the File Path in the ImageView
        //Fetch the image from the External Storage
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inSampleSize = 8;
        Bitmap b1 = BitmapFactory.decodeFile(filepath_received, options);

        //Now set the image inside the ImageView
        ivr.setImageBitmap(b1);
    }

    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_uninstall, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        //If the Uninstall button is pressed then the Application should be uninstalled
        if(id == R.id.item1){
            Intent intent = new Intent(Intent.ACTION_DELETE);
            intent.setData(Uri.parse("package:com.example.i851409.photonotes"));
            startActivity(intent);
        }

        return super.onOptionsItemSelected(item);
    }

}
--------------------------------
AndroidManifest.xml
--------------------------------
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.i851409.photonotes">

    <!-- This feature allows only devices which have a Camera to instal this application -->
    <uses-feature
        android:name="android.hardware.camera"
        android:required="true" />

    <!-- This is the permission required to store/retrieve the picture into/from the external storage SD Card -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <activity
            android:name=".MainActivity"
            android:label="@string/app_name"
            android:theme="@style/AppTheme.NoActionBar">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity
            android:name=".AddPhotoActivity"
            android:label="@string/title_activity_add_photo"
            android:theme="@style/AppTheme.NoActionBar" />
        <activity
            android:name=".PhotoDescriptionActivity"
            android:label="@string/title_activity_photo_description"
            android:theme="@style/AppTheme.NoActionBar"></activity>
    </application>

</manifest>