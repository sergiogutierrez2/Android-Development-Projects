---------------
Broadcast.java
--------------
package com.example.i851409.arttherapy;

//Importing the important packages
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.TaskStackBuilder;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.os.Vibrator;
import android.support.v4.app.NotificationCompat;

public class Broadcast extends BroadcastReceiver {

    private NotificationManager notification_manager;
    private int NOTIFICATION_ID;

    //Implementing the onReceive()
    @Override
    public void onReceive(Context context, Intent intent) {

        NotificationCompat.Builder mBuilder =
                new NotificationCompat.Builder(context)
                        .setSmallIcon(R.drawable.icon_notification)
                        .setContentTitle("ART THERAPY")
                        .setContentText("Please join Art Therapy")
                        .setAutoCancel(true)
                        .setContentInfo("GO TO ART THERAPY?")
                        .setColor(Color.RED);

        //Setting the vibrator
        Vibrator vibrator= (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);
        vibrator.vibrate(50);
        mBuilder.setDefaults(Notification.DEFAULT_SOUND);


        //Launching the DrawActivity
        Intent resultIntent = new Intent(context, DrawActivity.class);
        TaskStackBuilder stackBuilder = TaskStackBuilder.create(context);
        stackBuilder.addParentStack(DrawActivity.class);


        stackBuilder.addNextIntent(resultIntent);
        PendingIntent resultPendingIntent =
                stackBuilder.getPendingIntent(
                        0,
                        PendingIntent.FLAG_UPDATE_CURRENT
                );

        mBuilder.setContentIntent(resultPendingIntent);
        mBuilder.setFullScreenIntent(resultPendingIntent,false);



        notification_manager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
        notification_manager.notify(0,mBuilder.build());


    }


}
--------------------------------------------
DrawActivity.java
-------------------------------------------
package com.example.i851409.arttherapy;

import android.content.Context;
import android.content.Intent;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.os.Vibrator;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.View;
import android.view.Menu;
import android.view.MenuItem;

public class DrawActivity extends AppCompatActivity implements SensorEventListener {

    //Initializing the variables
    private SensorManager sensor_manager;
    private static final int force_th = 50;
    private static final int time_th = 350;
    private static final int timeout_shake = 750;
    private static final int interval_shake = 2000;

    //This variable indicates that the Drawing will be erased from the canvas when the device is shaked for atleast 2 times
    private static final int shake_count = 2;


    private float sensor_x_point = -1.0f, sensor_y_point = -1.0f, sensor_z_point = -1.0f;
    private long previous_sensor_time;
    private int shakeCount = 0;
    private long previous_sensor_shake;
    private long previous_sensor_force;
    private float accelarator;
    DrawCustomView dcv;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //Setting the Main View of the Application to this customized drawing view
        setContentView(R.layout.activity_draw);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        //Instantiating the DrawCustomView class
        dcv = (DrawCustomView) findViewById(R.id.customId);

        //Initialize the Sensor Manager object to fetch the services of the Sensor
        sensor_manager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);

        //Register the listener for the Sensor with the Sensor Mnager
        sensor_manager.registerListener(this, sensor_manager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER), SensorManager.SENSOR_DELAY_NORMAL);

        //Refreshoing the values of some of the Accelerometer properties
        previous_sensor_force = System.currentTimeMillis();
        previous_sensor_time = previous_sensor_force;
        previous_sensor_shake = previous_sensor_force;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_draw, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    //Method that will clear the contents and the drawing from the canvas
    public void clearCanvas(View v) {

        dcv.clearCanvas();

    }


    //Register the listener for the Sensor
    protected void OnResume() {
        super.onResume();
        sensor_manager.registerListener(this,
                sensor_manager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),
                SensorManager.SENSOR_DELAY_NORMAL);

    }

    @Override
    //Unregister the listener for the Sensor
    protected void onPause() {
        sensor_manager.unregisterListener(this);
        super.onPause();
    }

    //Implementing two compulsory methods of the Sensor Listener
    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {

    }

    @Override
    public void onSensorChanged(SensorEvent event) {
        long now = System.currentTimeMillis();

        if ((now - previous_sensor_force) > timeout_shake) {
            shakeCount = 0;
        }

        if ((now - previous_sensor_time) > time_th) {
            long diff = now - previous_sensor_time;

            accelarator = Math.abs(event.values[0] + event.values[1] + event.values[2] - sensor_x_point - sensor_y_point - sensor_z_point) / diff * 10000;
            if (accelarator > force_th) {

                if ((++shakeCount >= shake_count) && ((now - previous_sensor_shake) > interval_shake)) {
                    Vibrator v = (Vibrator)this.getSystemService(Context.VIBRATOR_SERVICE);
                    v.vibrate(100);

                    //Clearing and erasing from the canvas
                    clearCanvas(dcv);

                    //Starting a service inside a separate thread to play the music
                    Intent intent = new Intent(this,MusicPlay.class);
                    startService(intent);


                    previous_sensor_shake = now;
                    shakeCount = 0;
                }
                previous_sensor_force = now;
            }
            else
            {


            }

            previous_sensor_time = now;
            sensor_x_point = event.values[0];
            sensor_y_point = event.values[1];
            sensor_z_point = event.values[2];
        }

    }


}
-----------------------------------
DrawCustomView.java
----------------------------------

package com.example.i851409.arttherapy;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;

/**
 * This Class represents the Custom View that will enable the users to draw on the canvas
 */


public class DrawCustomView extends View{
    //Instantiating the paint brush and the path objects
    private Paint paint_brush = new Paint();
    private Path path_draw = new Path();

    //Implementing the constructors
    public DrawCustomView(Context context) {
        super(context);

        //Invoking initialSetting() to set up the paint brush and other properties
        initialSetting(null, 0);
    }

    //Will be using this constructor to set the various properties for the paint brush
    public DrawCustomView(Context context, AttributeSet attrs) {
        super(context, attrs);

        //Invoking initialSetting() to set up the paint brush and other properties
        initialSetting(attrs, 0);

    }

    public DrawCustomView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);

        //Invoking initialSetting() to set up the paint brush and other properties
        initialSetting(attrs, defStyleAttr);
    }

    public DrawCustomView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)
    {
        super(context, attrs, defStyleAttr, defStyleRes);

        //Invoking initialSetting() to set up the paint brush and other properties
        initialSetting(attrs, defStyleAttr);
    }


    public void initialSetting(AttributeSet attributeSet, int defStyleAttr){

        //Setting this property for a smoother brush strokes
        paint_brush.setAntiAlias(true);

        //Setting the color for the Paint Brush
        paint_brush.setColor(Color.BLACK);

        //Setting the corner display for the drawings done by the User
        //The corners will be seen circular in display
        paint_brush.setStrokeJoin(Paint.Join.ROUND);

        //Setting the style of the stroke of the paint brush
        paint_brush.setStyle(Paint.Style.STROKE);

        //Setting the width of the stroke of the paint brush
        paint_brush.setStrokeWidth(8f);
    }

    //Method that will enable the users to draw on the canvas
    @Override
    protected void onDraw(Canvas canvas){
        super.onDraw(canvas);
        canvas.drawPath(path_draw, paint_brush);
    }

    //Method to define the path to be drawn when the paint brush touches the canvas screen when the user wants to draw something
    @Override
    public boolean onTouchEvent(MotionEvent event){

        //Defining the X and Y co-ordinates for the paint brush position
        float x_dir_point = event.getX();
        float y_dir_point = event.getY();

        //Adding a swith case to detect the direction in which the paint brush will move
        switch(event.getAction()){
            //When the user touches the screen with the brush, fetch those co-ordinates
            case MotionEvent.ACTION_DOWN:
                path_draw.moveTo(x_dir_point, y_dir_point);
                return true;
            //When user starts moving the paint brush, show a line to connect to those points
            case MotionEvent.ACTION_MOVE:
                path_draw.lineTo(x_dir_point, y_dir_point);
                break;
            //When the user lifts the hand from the paint brush, do nothing
            case MotionEvent.ACTION_UP:
                break;
            default:
                return false;
        }

        //Perform a repaint()
        invalidate();
        return true;

    }

    //Method to clear the drawings and the contents from the canvas
    public void clearCanvas() {

        path_draw.reset();

        invalidate();

    }
}
-----------------------------------
MusicPlay.java
----------------------------------
package com.example.i851409.arttherapy;

import android.app.IntentService;
import android.content.Intent;
import android.media.MediaPlayer;


public class MusicPlay extends IntentService {
    private boolean flag = false;

    //Implementing the constructor for this class
    public MusicPlay() {
        super("Intent Service Hii");
    }

    //Invoke the method to handle the intent service
    protected void onHandleIntent(Intent intent) {

        //Instantiating the MediaPlayer class
        MediaPlayer media_player = MediaPlayer.create(MusicPlay.this, R.raw.eraser);
        media_player.start();
        while(media_player.isPlaying())
        {
            System.out.println();
        }

        //Reset and refresh the media player music clip
        media_player.reset();
        media_player.release();

    }

}
----------------------------
AndroidManifest.xml
------------------------------
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.i851409.arttherapy">

    //Permission to allow the phone to vibrate along with playing the music
    <uses-permission android:name="android.permission.VIBRATE" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <activity
            android:name=".DrawActivity"
            android:label="@string/app_name"
            android:theme="@style/AppTheme.NoActionBar">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <service android:name=".MusicPlay"/>

        <receiver android:name="Broadcast" >
            <intent-filter>
                <action android:name="android.intent.action.USER_PRESENT" >
                </action>
            </intent-filter>
        </receiver>
    </application>

</manifest>